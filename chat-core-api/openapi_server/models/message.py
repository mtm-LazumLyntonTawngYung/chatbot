from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI \
        Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role=None, message=None):  # noqa: E501
        """Message - a model defined in OpenAPI

        :param role: The role of this Message.  # noqa: E501
        :type role: str
        :param message: The message of this Message.  # noqa: E501
        :type message: str
        """
        self.openapi_types = {
            'role': str,
            'message': str
        }

        self.attribute_map = {
            'role': 'role',
            'message': 'message'
        }

        self._role = role
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message of this Message.  # noqa: E501
        :rtype: Message
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role(self) -> str:
        """Gets the role of this Message.

        The role of the message sender  # noqa: E501

        :return: The role of this Message.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this Message.

        The role of the message sender  # noqa: E501

        :param role: The role of this Message.
        :type role: str
        """
        allowed_values = ["system", "bot", "user"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def message(self) -> str:
        """Gets the message of this Message.

        The content of the message  # noqa: E501

        :return: The message of this Message.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Message.

        The content of the message  # noqa: E501

        :param message: The message of this Message.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
