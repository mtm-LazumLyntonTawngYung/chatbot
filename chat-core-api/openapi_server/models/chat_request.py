from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.message import Message
from openapi_server import util

from openapi_server.models.message import Message  # noqa: E501

class ChatRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message=None, bot_style=None, messages=None):  # noqa: E501
        """ChatRequest - a model defined in OpenAPI

        :param message: The message of this ChatRequest.  # noqa: E501
        :type message: str
        :param bot_style: The bot_style of this ChatRequest.  # noqa: E501
        :type bot_style: str
        :param messages: The messages of this ChatRequest.  # noqa: E501
        :type messages: List[Message]
        """
        self.openapi_types = {
            'message': str,
            'bot_style': str,
            'messages': List[Message]
        }

        self.attribute_map = {
            'message': 'message',
            'bot_style': 'bot_style',
            'messages': 'messages'
        }

        self._message = message
        self._bot_style = bot_style
        self._messages = messages

    @classmethod
    def from_dict(cls, dikt) -> 'ChatRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChatRequest of this ChatRequest.  # noqa: E501
        :rtype: ChatRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self) -> str:
        """Gets the message of this ChatRequest.

        User message  # noqa: E501

        :return: The message of this ChatRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this ChatRequest.

        User message  # noqa: E501

        :param message: The message of this ChatRequest.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def bot_style(self) -> str:
        """Gets the bot_style of this ChatRequest.


        :return: The bot_style of this ChatRequest.
        :rtype: str
        """
        return self._bot_style

    @bot_style.setter
    def bot_style(self, bot_style: str):
        """Sets the bot_style of this ChatRequest.


        :param bot_style: The bot_style of this ChatRequest.
        :type bot_style: str
        """
        allowed_values = ["normal", "friend", "doctor"]  # noqa: E501
        if bot_style not in allowed_values:
            raise ValueError(
                "Invalid value for `bot_style` ({0}), must be one of {1}"
                .format(bot_style, allowed_values)
            )

        self._bot_style = bot_style

    @property
    def messages(self) -> List[Message]:
        """Gets the messages of this ChatRequest.

        A list of previous messages from the conversation  # noqa: E501

        :return: The messages of this ChatRequest.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages: List[Message]):
        """Sets the messages of this ChatRequest.

        A list of previous messages from the conversation  # noqa: E501

        :param messages: The messages of this ChatRequest.
        :type messages: List[Message]
        """

        self._messages = messages
